##############################################################################
##                          TuttleOFX Project                                #
##                                                                           #
##                                                                           #
##                                                                           #
## Build:                                                                    #
##                                                                           #
## call bjam.sh with:                                                        #
##      /tuttle         build tuttle library                                 #
##      /sam-tools      build sam commands line tool                         #
##                          - sam-ls                                         #
##                          - sam-cp                                         #
##                          - sam-mv                                         #
##                          - sam-rm                                         #
##                          - sam-do                                         #
##                          - sam-check                                      #
##                          - sam-plugins                                    #
##                          - sam-install ( to install in dist directory )   #
##                                                                           #
##      or your can build a specific tools with:                             #
##      /sam-tools//sam-toolname (example: /sam-tools//sam-do )              #
##      ( warning: it not run the sam-install command. )                     #
##                                                                           #
##      /qsam           build a little GUI in Qt4                            #
##      /plugins                                                             #
##                                                                           #
##      /tuttletests                                                         #
##      /samtests                                                            #
##                                                                           #
##      /pyTuttle                                                            #
##      /tests                                                               #
##      /tests-io                                                            #
##                                                                           #
##                                                                           #
##      to build static plugins and or application, add:                     #
##      ./bjam.sh link=static [target]                                       #
##                                                                           #
##      default build is in debug, to build in release type:                 #
##      ./bjam.sh variant=release [target]                                   #
##                                                                           #
##############################################################################
import os ;
import path ;
import feature ;

# versions of gcc with specific template-depth
gcc-no-overflow = 4.5.0   4.5.1   4.5.2   4.5.3   4.6.0   4.6.1   4.6.2 ;

include tools/bjamf/rules.jam ;

##############################################################################
# Python
##############################################################################

# see the user-config.jam file

##############################################################################
# Environment variables
##############################################################################

local               BOOST_ROOT  = [ modules.peek : BOOST_ROOT ] ;
check-required-env  BOOST_ROOT ;

path-constant   3RD_PARTY       : 3rdParty ;
path-constant   LIBRARIES       : libraries ;
path-constant   BOOST_LIBS      : $(BOOST_ROOT) ;
path-constant   BOOST_HACK      : $(LIBRARIES)/boostHack ;
path-constant   TERRY           : $(LIBRARIES)/terry ;
path-constant   SEQUENCE_PARSER : $(LIBRARIES)/sequenceParser ;

local DISTRIB = [ haveDistPath ] ;

path-constant   DIST            : $(DISTRIB) ;
path-constant   DIST_RELEASE    : $(DIST)/release ;
path-constant   DIST_DEBUG      : $(DIST)/debug ;
path-constant   DIST_PRODUCTION : $(DIST)/production ;
path-constant   BUILD           : ./.build ;

##############################################################################
# Global project requirements
##############################################################################
project
	:
		requirements
		# multithreading on
		<threading>multi
		<define>BOOST_ALL_NO_LIB
		#disable detailed boost exception
		<define>BOOST_EXCEPTION_DISABLE

		#<variant>release:<warnings-as-errors>on
		<variant>release:<define>TUTTLE_PRODUCTION
		#<variant>release:<define>TUTTLE_NO_COUT

		<variant>release:<toolset>gcc,<optimization>speed:<define>USE_INLINE_ASSEMBLER
		#<toolset>gcc:<cxxflags>-mssse3
		<toolset>gcc:<cxxflags>-msse2
		<define>BOOST_REGEX_NO_EXTERNAL_TEMPLATES

		<os>LINUX:<variant>debug:<linkflags>-Wl,--no-undefined
		<os>LINUX:<variant>release:<linkflags>-fvisibility=hidden
		<os>LINUX:<cxxflags>-fPIC
		<os>LINUX:<cflags>-fPIC

		<os>NT:<define>_WINDOWS

		# icu library off
		#<define>BOOST_HAS_ICU=0

		#
		# GCC specific flags
		#
		# removes deprecated header used by boost
		<toolset>gcc:<cxxflags>-Wno-deprecated

		<toolset-gcc:version>$(gcc-no-overflow):<cxxflags>"-ftemplate-depth=256"
		#
		# Clang specific flags
		#
		<toolset>clang:<cxxflags>-fcolor-diagnostics

		# default build
		#<variant>release

		#
		# MSVC specific flags
		#
		<toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
		<toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE

		<os>LINUX:<define>__LINUX__

		<define>MAGICKCORE_QUANTUM_DEPTH=16
		<define>QUANTUM_DEPTH=16
	;

##############################################################################
# libraries
##############################################################################
use-project     /boost      : $(BOOST_LIBS) ;
use-project     /boostHack  : $(BOOST_HACK) ;
use-project     /terry      : $(TERRY) ;

##############################################################################
# Main targets
##############################################################################
#
# TUTTLE LIBRARY & TESTS
#
use-project     /tuttle         : libraries/tuttle ;

#
# SAM COMMAND LINE TOOL & TESTS
#
use-project     /sam-tools      : applications/sam/ ;
alias           /sam            : /sam-tools ;

#
# TUTTLEOFX PLUGINS
#
use-project     /plugins        : plugins ;

alias /tests-io
	:
		plugins/image/io/Dpx//io-tests
		plugins/image/io/Exr//io-tests
		#plugins/image/io/FFMpeg//io-tests
		plugins/image/io/ImageMagick//io-tests
		plugins/image/io/Jpeg//io-tests
		plugins/image/io/Jpeg2000//io-tests
		plugins/image/io/OpenImageIO//io-tests
		plugins/image/io/Png//io-tests
		plugins/image/io/Raw//io-tests
	;

alias /tests
	:
		/tuttle//tuttle-tests
		/terry//terry-tests
		#$(SEQUENCE_PARSER)//test
	;

# all targets have to be marked as explicit
explicit
		/tuttle
		/tuttletests

		/sam-tools
		/plugins
		/pyTuttle
		/io-tests
		/tests
	;
